JYTAGSentArchiveDepCheck = Ext.extend(Ext.Panel, {
	taskId : null,
	setTaskId : function(vId) {
		this.taskId = vId;
	},
	getTaskId : function() {
		return this.taskId;
	},
	formPanel : null,
	displayPanel : null,
	constructor : function(_cfg) {
		Ext.applyIf(this, _cfg);
		this.initUIComponents();
		JYTAGSentArchiveDepCheck.superclass.constructor.call(this, {
					id:'JYTABGSJYTAGSentArchiveDepCheck',
					layout : 'form',
					items : [this.displayPanel, this.formPanel],
					modal : true,
					height : 700,
					width : 700,
					autoHeight : true,
					maximizable : true,
					buttonAlign : 'center',
					buttons : this.buttons
				});
	},
	initUIComponents : function() {

		this.displayPanel = new Ext.Panel({
				id :'JYTAFFJYTAXSentArchiveDepCheck.displayPanel',
			autoScroll : true,
			autoHeight : true,
			border : false,
			autoLoad : {	//将该Panel以jsp的返回填充，这里需要传递用于显示公文信息的公文的ID,和公文附件的ids
				url : __ctxPath
				+ '/pages/flowPath/dispatchFlow.jsp?archiveId=${archivesId}&fileIds=${fileIds}&defId=${defId}&sentPanelId=JYTAFFJYTAXSentArchiveDepCheck',
				nocache : true
			}
		});
		
								
		this.formPanel = new Ext.FormPanel({
			layout : 'form',
			bodyStyle : 'padding:10px 10px 10px 10px',
			border : false,
			url : __ctxPath + '/archive/saveDepLeaderRead.do',
			id : 'JYTAGSentArchiveDepCheckForm',
			defaults : {
				anchor : '98%,98%'
			},
			items : [new ArchivesUtil({
						panelId : 'JYTABGSJYTAGSentArchiveDepCheck',
						archivesId : '${archivesId}'
					}).getGridPanelWithFullTools(),{
						name : 'archives.archivesId',
						xtype : 'hidden',
						value : '${archivesId}'
					}, {
						xtype : 'radiogroup',
						allowBlank : false,
						columns :[.35,.3,.3],//表示该元素的子组件所占宽度比例，此处0.3=.3=30%。
						defaults:{	//{}对象A中的defaults属性值也是一个对象，该对象的属性会被A的所有子元素继承，并可以被重写。
							listeners : {//为radiogroup中items的所有组件添加该listeners
								'check' : function(checkbox, checked) {
									if (checked) {
										Ext.getCmp('JYTAGviceLeaderIds').setValue('');
										Ext.getCmp('JYTAGSentArchiveDepCheck.LeaderNames').setValue('');
									}
								}
							}
						},
						items : [ {
							boxLabel : '处室会签(办公室发起)',
							width :100,
							name : 'depOption',
							inputValue : 1,//选中该radio button时radiogroup的值
							checked : true
						}, {
							width :50,
							boxLabel : '领导会签',
							name : 'depOption',
							inputValue : 2
						}, {
							boxLabel : '签发',
							width :50,
							name : 'depOption',
							inputValue : 4
						}],
						fieldLabel : '审批步骤'
					}, {
						id : 'JYTAGSentArchiveDepCheck.Leaders',
						xtype : 'container',
						layout : 'column',
						style : 'padding:0px 0px 8px 0px;margin-left:0px;',
						defaults : {
							border : false
						},
						items : [{
									xtype : 'label',
									style : 'padding:0px 0px 0px 0px;',
									text : '选择人员:',
									width : 105
								}, {
									xtype : 'textfield',
									width : 445,
									readOnly : true,
									id : 'JYTAGSentArchiveDepCheck.LeaderNames'
								}, {
									xtype : 'hidden',
									id : 'JYTAGviceLeaderIds'
								}, {
									xtype : 'button',
									iconCls : 'menu-department',
									text : '选择人员',
									handler : function() {
										var option = formPanel.getCmpByName('depOption').getGroupValue();
										var url = __ctxPath +"/system/depLeadersTreeDepartment.do";
										if(option==2 || option==4){
											url+= '?roles=100175';
										}else if(option==3){
											url+= '?roles=100152,100156&depIds='+curUserInfo.depId;
										}else{
											url+= '?roles=100152,100156&depIds=';
										}
										
										//创建领导选择器
										//DepLeaders.getView(
										//	callback,//选择后点击“确定”后的回调方法，返回参数：userIds（选择的userid,多个以","隔开）, fullnames（选择的用户名）.
										//	isSingle,//是否单选，true|false,默认false.
										//	map,//保留参数2013-10-10，传入null即可.
										//	url //加载领导数据的url,默认__ctxPath + '/system/dep3LeadersTreeDepartment.do'，
										//		该url有可选参数depIds（部门列表）和roles（角色列表），组合可查出某些部门下的某
										//		些角色level==3的用户，两者都无则查询全部level==3的用户.
										//)
										DepLeaders.getView(
												function(userIds, fullnames) {
													Ext.getCmp('JYTAGviceLeaderIds').setValue(userIds);
													Ext.getCmp('JYTAGSentArchiveDepCheck.LeaderNames')
															.setValue(fullnames);
												}, (option==4||option==3), null,url).show();
									}
								}]
					}, {
						xtype : 'container',
						layout : 'column',
						defaults : {
							border : false
						},
						items : [{
									xtype : 'label',
									text : '审批意见:',
									width : 105
								}, {
									name : 'leaderRead.leaderOpinion',
									xtype : 'textarea',
									maxLength :500,
									width : 440,
									height:40
								},{
									xtype : 'button',
									iconCls : 'menu-flowWait',
									text : '常用批示语',
									style:'margin-top:10px;margin-left:5px;',
									handler : function() {
										OdCommentsSelector.getView(
											function(id, name) {
												Ext.getCmp('JYTAGSentArchiveDepCheckForm')
													.getCmpByName('leaderRead.leaderOpinion')
													.setValue(name);
											}, true).show();
										}
								}]
					
					}, {
						name : 'leaderRead.checkName',
						xtype : 'hidden',
						value : #foreach ($v in $nextTrans)
								'${v.source}'
							#end
					}, {
						name : 'leaderRead.depName',
						xtype : 'hidden',
						value : curUserInfo.depName
					}]
		});
		
		if(taskId){
			Ext.Ajax.request({
			url : __ctxPath + '/flow/getPreviousStepProcessRun.do',
			params : {
				'taskId' : taskId
			},
			method:'post',
			success : function(response, options) {
				var processForm = Ext.util.JSON.decode(response.responseText).data;
				var prevSignalName  = processForm[0].signalName;
				var prevDestName  = processForm[0].activityName;
				if(prevDestName.toString().indexOf("会签")!=-1 ||prevDestName.toString().indexOf("复核")!=-1){
					Ext.getCmp('JYTAGSentArchiveDepCheck.return').hide();
				}
			},
			failure : function(response, options) {
					Ext.ux.Toast.msg('操作信息', '撤回出错，请联系管理员！');
				}
			});
		}
		
		this.buttons = [ #set ($count=0)
							#foreach ($v in $nextTrans)	//$nextTrans的值是该节点的流出路径的集合
								#if($count<1)
								new Ext.Button({
								   iconCls:'btn-transition',
								   text:'确认',
								   handler:this.save.createCallback(this.formPanel,this,'${v.name}','${v.source}','${v.destination}')
								}),
								new Ext.Button({
								   iconCls:'btn-changeTask',
								   id : 'JYTAGSentArchiveDepCheck.return',
								   text:'退回',
								   handler:this.backsetp.createCallback(this.formPanel,this,'${v.source}')
								})
								#end
								#set ($count=$count+1)
						#end];
	},
	backsetp:function(formPanel,panel,activityName){
		/*if (panel.store.getCount() == 0) {
			Ext.ux.Toast.msg('操作信息', '请添加公文正文!');
			return false;
		}*/
		if (!formPanel.getForm().isValid()){return false;}
		 Ext.Ajax.request({
			url : __ctxPath + '/flow/getPreviousStepProcessRun.do',
			params : {
				'taskId' : panel.taskId
			},
			method:'post',
			success : function(response, options) {
				var processForm = Ext.util.JSON.decode(response.responseText).data;
				var prevSignalName  = processForm[0].signalName;
				var prevDestName  = processForm[0].activityName;
				var prevFlowAssignId =  processForm[0].creatorId;
				var sendMail = msgPanel.getCmpByName('sendMail').getValue();
				var sendMsg = msgPanel.getCmpByName('sendMsg').getValue();
				var sendInfo = msgPanel.getCmpByName('sendInfo').getValue();

				//alert(processForm[0].activityName + " " + processForm[0].creatorId  +" " + activityName + " " + "to"+processForm[0].activityName); 
				formPanel.getForm().submit({
						url:__ctxPath+ "/flow/nextForSyncProcessActivity.do",
						method:'post',
						waitMsg:'正在提交处理，请稍等',
						timeout : 120000,
						scope:this,
						params:{
								taskId : panel.taskId,
								signalName : prevSignalName,
								activityName : activityName,
								comments : '退回',
								destName : prevDestName,
								status : '已处理',												
								sendMail : sendMail,
								sendMsg : sendMsg,
								sendInfo:sendInfo,
								//看是否指定了执行人员
								flowAssignId : prevFlowAssignId
						},
						success : function(fp, action) {
							## Ext.ux.Toast.msg('操作信息','退回上一步成功！');
                            // --无后续的错误友好提示开始
                            var jsonResult = action.result;
                            if (jsonResult) {
                                if (jsonResult && jsonResult.success == "true") {
                                    Ext.ux.Toast.msg("操作信息", "操作成功！");
                                } else {
                                    var resultMsg = "信息保存出错，请联系管理员！";
                                    var resuIcon = Ext.MessageBox.ERROR;
                                    if (jsonResult.message && jsonResult.message != null) {
                                        resultMsg = jsonResult.message;
                                        if (jsonResult.code && (jsonResult.code == '2' || jsonResult.code == '3')) {
                                            resuIcon= Ext.MessageBox.WARNING;
                                        }
                                    }
                                    Ext.MessageBox.show({
                                        title : '操作信息',
                                        msg : resultMsg,
                                        buttons : Ext.MessageBox.OK,
                                        icon : resuIcon
                                    });
                                }
                            }
                            // --无后续的错误友好提示结束
							AppUtil.removeTab('ProcessForm' + panel.taskId);
							refreshTaskPanelView();
						},
						failure : function(fp, action) {
							## Ext.ux.Toast.msg('操作信息', '操作出错，请联系管理员！');
                            Ext.MessageBox.show({
                                title : '操作信息',
                                msg : '当前系统繁忙，请稍后再处理！',
                                buttons : Ext.MessageBox.OK,
                                icon : Ext.MessageBox.WARNING
                            });
						}
					}
				
				);},
			failure : function(response, options) {
					Ext.ux.Toast.msg('操作信息', '撤回出错，请联系管理员！');
				}
			});
	},
	save : function(formPanel, panel, signalName, activityName, destination) {
		/*if (panel.store.getCount() == 0) {
			Ext.ux.Toast.msg('操作信息', '请添加公文正文!');
			return false;
		}*/
		if("" == Ext.getCmp('JYTAGSentArchiveDepCheck.LeaderNames').getValue()){
			alert('请选择人员！');
			return false;
		}
		if (formPanel.getForm().isValid()) {
			var option = formPanel.getCmpByName('depOption').getGroupValue();
			var sendMail = msgPanel.getCmpByName('sendMail')
					.getValue();
			var sendMsg = msgPanel.getCmpByName('sendMsg')
					.getValue();
			var sendInfo = msgPanel.getCmpByName('sendInfo').getValue();		
			var params = {
					officeNext : option,//分支节点读取该值配合流程定义决定流程下一步流向,需要在-fields.xml配置
					officeExerId : curUserInfo.userId,//该节点执行人，即当前用户，方便以后节点读取,需要在-fields.xml配置
					taskId : panel.taskId,//每个节点都要向nextProcessActivity.do提交taskId : panel.taskId
					signalName   : signalName,//流程的下一个节点名
					activityName : activityName,//当前节点名
					ccUserIds    : ccPanel.getCmpByName('ccIds').getValue(),//抄送人，多个以“,”隔开
					sendMail : sendMail,//是否发送邮件通知，true|false
					sendMsg  : sendMsg,//是否发送手机短信通知，true|false
					sendInfo:sendInfo,
					comments : formPanel.getCmpByName('leaderRead.leaderOpinion').getValue()//节点处理意见
				};
			var leaderIds = Ext.getCmp('JYTAGviceLeaderIds').getValue();
			if (1 == option ) {	//会签
				
				//Ext.apply(A,B)复制B对象的所有属性到A
				Ext.apply(params,{
//					status:'呈处室会签(办公室发起)',
					depLeaderOption : 'roomSign',
					destName : '处室会签(办公室发起)',
					signUserIds : leaderIds
				});
			} else if (2 == option ) { //处室
				Ext.apply(params,{
					status:'呈领导会签',
					depLeaderOption : 'depSign',
					destName : '领导会签',//目的节点名,会签时需要指定
					//signUserIds会签到的一个或多个用户id，逗号隔开
					signUserIds : leaderIds	//有提交signUserIds属性表示是会签任务，同时需要指定destName
				});
			}else {		//签发
				Ext.apply(params,{
					//status:'呈签发',
					depLeaderOption : 'sent',
					//下步执行人，单个用户id,与流程定义时配置的用户和角色比优先级最高，若提交将无视流程定义时的配置
					flowAssignId : leaderIds
				});
			}

			formPanel.getForm().submit({
				url : __ctxPath + "/flow/nextForSyncProcessActivity.do",
				method : 'post',
				waitMsg : '正在提交数据...',
                timeout : 120000,
				params : params,
				success : function(fp, action) {
					## Ext.ux.Toast.msg('操作信息', '办公室审核成功！');
                    // --无后续的错误友好提示开始
                    var jsonResult = action.result;
                    if (jsonResult) {
                        if (jsonResult && jsonResult.success == "true") {
                            Ext.ux.Toast.msg("操作信息", "操作成功！");
                        } else {
                            var resultMsg = "信息保存出错，请联系管理员！";
                            var resuIcon = Ext.MessageBox.ERROR;
                            if (jsonResult.message && jsonResult.message != null) {
                                resultMsg = jsonResult.message;
                                if (jsonResult.code && (jsonResult.code == '2' || jsonResult.code == '3')) {
                                    resuIcon= Ext.MessageBox.WARNING;
                                }
                            }
                            Ext.MessageBox.show({
                                title : '操作信息',
                                msg : resultMsg,
                                buttons : Ext.MessageBox.OK,
                                icon : resuIcon
                            });
                        }
                    }
                    // --无后续的错误友好提示结束
					AppUtil.removeTab('ProcessForm' + panel.taskId);
					refreshTaskPanelView();//完成任务后调用，用来刷新“我的待办”等列表
				},
				failure : function(fp, action) {
					## Ext.ux.Toast.msg('操作信息', '操作出错，请联系管理员！');
                    Ext.MessageBox.show({
                        title : '操作信息',
                        msg : '当前系统繁忙，请稍后再处理！',
                        buttons : Ext.MessageBox.OK,
                        icon : Ext.MessageBox.WARNING
                    });
				}
			});
		}
	}// end of save
})